@model PagedList.IPagedList<Task_Assignment.Models.Employee>
@using PagedList.Mvc;

@{
    ViewBag.Title = "Index";
}

<h2>Listing</h2>

<p>
    <a class="btn btn-primary" href="@Url.Action("Create", "Employees", null, Request.Url.Scheme)" role="button">Create New</a>
</p>
<table class="table table-bordered table-striped">
    <tr>
        <th>
            @Html.ActionLink("Username", "Index", new { sortOrder = ViewBag.UsernameSortParm })
        </th>
        <th>
            @Html.ActionLink("Full Name", "Index", new { sortOrder = ViewBag.FullNameSortParm })
        </th>
        <th>
            @Html.ActionLink("Join Date", "Index", new { sortOrder = ViewBag.JoinDateSortParm })
        </th>
        <th>
            @Html.ActionLink("Team", "Index", new { sortOrder = ViewBag.TeamSortParm })
        </th>
        <th>
            @Html.ActionLink("Position", "Index", new { sortOrder = ViewBag.PositionSortParm })
        </th>
        <th>
            @Html.ActionLink("Status", "Index", new { sortOrder = ViewBag.StatusSortParm })
        </th>
        <th></th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td class="align-middle">
                @Html.DisplayFor(modelItem => item.Username)
            </td>
            <td class="align-middle">
                @Html.DisplayFor(modelItem => item.FullName)
            </td>
            <td class="align-middle">
                @Html.DisplayFor(modelItem => item.JoinDate)
            </td>
            <td class="align-middle">
                @EnumExtensions.GetDisplayName(item.Team)
            </td>
            <td class="align-middle">
                @EnumExtensions.GetDisplayName(item.Position)
            </td>
            <td class="align-middle">
                @Html.DisplayFor(modelItem => item.Status)
            </td>
            <td class="align-middle">
                <a class="btn btn-sm btn-outline-secondary" href="@Url.Action("Edit", "Employees", new { id = item.EmployeeID }, Request.Url.Scheme)" role="button">Edit</a>
            </td>
            <td class="align-middle">
                <button type="button" class="btn btn-sm btn-outline-secondary" data-toggle="modal" data-target="#deleteModal" data-employeeid="@item.EmployeeID" data-employeeusername="@item.Username">Delete</button>
            </td>
        </tr>
    }
</table>

<br />

<div class="align-items-center d-flex justify-content-between">

    <ul class="my-auto pagination">

        <li class="page-item">
            <a class="page-link" href="@Url.Action("Index", new { page = 1 })" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
                <span class="sr-only">Previous</span>
            </a>
        </li>

        @for (int i = 1; i <= Model.PageCount; i++)
        {
            <li class="@(i == Model.PageNumber ? "page-item active" : "page-item")">
                <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
            </li>
        }

        <li class="page-item">
            <a class="page-link" href="@Url.Action("Index", new { page = Model.PageSize - 1 })" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
                <span class="sr-only">Next</span>
            </a>
        </li>

    </ul>
    <div>
        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
    </div>
</div>

@using (Html.BeginForm("Delete", "Employees", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Delete Confirmation</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group row">
                        <label for="employee-id" class="col-sm-4 col-form-label">Employee ID</label>
                        <div class="col-sm-8">
                            <input type="text" readonly class="form-control-plaintext" id="employee-id" name="EmployeeID">
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="employee-username" class="col-sm-4 col-form-label">Username</label>
                        <div class="col-sm-8">
                            <input type="text" readonly class="form-control-plaintext" id="employee-username">
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <input type="submit" value="Delete" class="btn btn-danger">
                </div>
            </div>
        </div>
    </div>
}


@section Scripts {
    <!--Reference the SignalR library. -->
    @Scripts.Render("~/bundles/signalR")
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--Reference the sessionHub definition. -->
    <script src="~/Scripts/sessionHub.js"></script>

    <!--Delete Confirmation box made from Bootstrap Model. -->
    <script>
        $('#deleteModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget)
            var employeeid = button.data('employeeid')
            var employeeusername = button.data('employeeusername')
            var modal = $(this)
            modal.find('#employee-id').val(employeeid)
            modal.find('#employee-username').val(employeeusername)
        })
    </script>
}
